AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM starter Typescript template.

Parameters:
  ProjectName:
    Type: String
    Description: Project name used throughut resources.
    Default: sam-starter
  EnvType:
    Type: String
    Description: Environment type.
  GithubOwner:
    Type: String
    Description: Github repo owner.
    Default: gilbertly
  GithubRepo:
    Type: String
    Description: Github repo name.
    Default: sam-starter-ts
  GithubOAuthToken:
    Type: String
    Description: Github OAuth token. User must have admin permissions to the repo.
    NoEcho: true
  GithubBranchSource:
    Type: String
    Description: Github branch to build from. eg. develop/staging.
  GithubBranchDest:
    Type: String
    Description: Git branch to open a PR into after deploy. eg. master/main.
    Default: ''

Conditions:
  PullRequestAfterDeploy: !Not [!Equals [!Ref GithubBranchDest, '']]

Globals:
  Function:
    Timeout: 45
    Runtime: nodejs12.x
    CodeUri: ./build
    Environment:
      Variables:
        ProjectName: !Ref ProjectName
    Layers:
      - !Ref DependenciesLayer

Resources:
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${ProjectName}-dependencies'
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs12.x

  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HelloFunction
      Handler: hello.handler
      Events:
        Hello:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  S3DeploymentArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub '${EnvType}-${ProjectName}-deploy-artifacts'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  GitHubActionFunction:
    Type: AWS::Serverless::Function
    Condition: PullRequestAfterDeploy
    Properties:
      FunctionName: GithubActionFunction
      Handler: github.handler
      Role: !GetAtt GitHubActionFunctionRole.Arn

  GitHubActionFunctionRole:
    Type: AWS::IAM::Role
    Condition: PullRequestAfterDeploy
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: AllowCreateLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Sid: AllowCodePipelineActions
                Effect: Allow
                Action:
                  - codepipeline:AcknowledgeJob
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                  - codepipeline:GetJobDetails
                Resource: '*'
          PolicyName: !Sub '${ProjectName}-github-action-policy'
      RoleName: !Sub '${ProjectName}-github-action-role'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${ProjectName}-codebuild'
      ServiceRole: !GetAtt CodeBuildProjectRole.Arn
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - node --version && npm --version &&  sam --version
                - npm install
            build:
              commands:
                - npm run clean:build
                - aws cloudformation package
                  --template-file ./template.yml
                  --s3-bucket ${ARTIFACTS_BUCKET}
                  --s3-prefix codepipeline/${PROJECT_NAME}
                  --output-template-file template-output.yml
            post_build:
              commands:
                - go get github.com/github-release/github-release
                - chmod +x ./release.sh && ./release.sh ${REPO_OWNER} ${REPO_NAME}
          artifacts:
            files:
              - template-output.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3DeploymentArtifactBucket
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: !Ref ProjectName
          - Name: REPO_OWNER
            Type: PLAINTEXT
            Value: !Ref GithubOwner
          - Name: REPO_NAME
            Type: PLAINTEXT
            Value: !Ref GithubRepo

  CodeBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: AllowCreateLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Sid: AllowCodeBuildIAMActions
                Effect: Allow
                Action: iam:ListPolicies
                Resource: '*'
              - Sid: AllowS3ObjectManipulation
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-*/*'
                  - !Sub 'arn:aws:s3:::${S3DeploymentArtifactBucket}/*'
          PolicyName: !Sub '${ProjectName}-codebuild-policy'
      RoleName: !Sub '${ProjectName}-codebuild-role'

  CodeStarSourceConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ProviderType: GitHub
      ConnectionName: !Sub ${ProjectName}-github-connection

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3DeploymentArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Version: '1'
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarSourceConnection
                FullRepositoryId: !Sub ${GithubOwner}/${GithubRepo}
                BranchName: develop
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceCodeOutputArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Version: '1'
                Category: Build
                Owner: AWS
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceCodeOutputArtifact
              OutputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Release
          Actions:
            - Name: ApprovalForRelease
              ActionTypeId:
                Version: '1'
                Category: Approval
                Owner: AWS
                Provider: Manual
              RunOrder: 1
            - !If
              - PullRequestAfterDeploy
              - Name: GitHubPullRequest
                ActionTypeId:
                  Version: '1'
                  Category: Invoke
                  Owner: AWS
                  Provider: Lambda
                Configuration:
                  FunctionName: !Ref GitHubActionFunction
                  UserParameters: !Sub |
                    '{
                      "GITHUB_REPO_OWNER": "${GithubOwner}",
                      "GITHUB_REPO": "${GithubRepo}",
                      "GITHUB_SOURCE_BRANCH": "${GithubBranchSource}",
                      "GITHUB_DEST_BRANCH": "${GithubBranchDest}",
                      "GITHUB_OAUTH_TOKEN": "${GithubOAuthToken}"
                    }'
                RunOrder: 2
              - !Ref AWS::NoValue

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: AllowCreateLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Sid: AllowS3ObjectManipulation
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${S3DeploymentArtifactBucket}'
                  - !Sub 'arn:aws:s3:::${S3DeploymentArtifactBucket}/*'
              - Sid: AllowCodeStarConnections
                Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref CodeStarSourceConnection
              - Sid: AllowCloudFormationActions
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ValidateTemplate
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}/*'
              - Sid: AllowCodeBuildActions
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Sid: AllowCloudFormationPassRole
                Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt CloudFormationDeployRole.Arn
              - !If
                - PullRequestAfterDeploy
                - Sid: AllowPullRequestInvokeFunction
                  Effect: Allow
                  Action: lambda:InvokeFunction
                  Resource: !GetAtt GitHubActionFunction.Arn
                - !Ref AWS::NoValue
              - !If
                - PullRequestAfterDeploy
                - Sid: AllowPullRequestListFunctions
                  Effect: Allow
                  Action: lambda:ListFunctions
                  Resource: '*'
                - !Ref AWS::NoValue
          PolicyName: !Sub '${ProjectName}-codepipeline-policy'
      RoleName: !Sub '${ProjectName}-codepipeline-role'

  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudformation.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: AllowDeployMostResources
                Effect: Allow
                Action:
                  - iam:*
                  - cloudtrail:*
                  - kms:*
                  - ec2:*
                  - autoscaling:*
                  - logs:*
                  - lambda:*
                  - events:*
                  - cloudformation:*
                  - apigateway:*
                  - s3:*
                  - secretsmanager:*
                  - sns:*
                  - ssm:*
                  - rds:*
                  - cloudwatch:*
                  - elasticloadbalancing:*
                  - codedeploy:*
                  - codebuild:*
                  - codepipeline:*
                  - cloudfront:*
                  - athena:*
                  - acm:*
                  - cloud9:*
                  - cognito-idp:*
                  - cognito-identity:*
                  - cognito-sync:*
                  - ecr:*
                  - ecs:*
                  - iot:*
                  - rds:*
                  - rds-data:*
                  - route53:*
                  - ses:*
                  - sqs:*
                  - waf:*
                Resource: '*'
          PolicyName: !Sub '${ProjectName}-cloudformation-policy'
      RoleName: !Sub '${ProjectName}-cloudformation-deploy-role'
